[{"content":"Recon Ping First of all what I\u0026rsquo;m going to do is use ping to know if the machine is up. In this case, I don\u0026rsquo;t need to know the operating system of the machine because HTB already gives us that information. Nevertheless, A cool tip about ping is that it allows you to know more or less the operating system used by the machine base on the ttl (I will leave a link to a page to know more about this in the reference). So like the ttl is 64 I asume that the machine uses linux.\nNmap PortScan After use ping, I usually use nmap to search for open ports using the following options:\n -p- With this flag I\u0026rsquo;m specifying that the scan will be performed on all ports \u0026ndash;open Using this flag I\u0026rsquo;m specifying that I only want to show open ports -T5 With this flag I\u0026rsquo;m specifying that the scan be as fast as possible( The faster the louder the scan) -v With this flag I\u0026rsquo;m indicating that the results are shown on the screen as the are found -n With this flat I\u0026rsquo;m indicating that I dont\u0026rsquo;t want DNS resolution -oN portscan To export the result to the portscan file in the nmap format   Port services found After knowing which ports are open, I will find out what services they are using.\n -sC To use basic enumeration scripts -sV To display the services found on the specified ports -p21,22,80 To specifying ports   As a result of the picture above, I can know that:\n -ftp service is on port 21 -ssh service is on port 22 -http is on port 80. The first two are typically used to access the machine when you have a user. For this reason, I will start analyzing the website.  Analyzing the website As a result of the analysis, i found within Security Snapshot the possibility of downloading a pcap file. So that\u0026rsquo;s what i did. Nevertheless as you can see in the image below, there was no information: So what i did next was inspect the button that you click to download the pcap and what i saw was the following : location.href='/download/8'. Which made me imagine that there could be a possibility that there would be another pcap file if instead of using an 8 it would use any other number. WFUZZ To fuzz I usually use wfuzz. You can do the following to install the tool:\npip install wfuzz The configuration for run the program was:  -w To select the wordlist. In this case, I used a a list with numbers from 0 to 10000. \u0026ndash;hc To not show requests that result in 404.  What we can see in the image above is that there are more pcaps. For example, I can download the file\nat: http://ip/download/0. If I open this new file with wireshark we could see that this time the file does have data: Searching for user and password After finding the file, the fist thing i did was use the wireshark filters to search for valid credentials to access the machine. Hitting ctrl+f and searching for user, I found the a possible user and password!!: Then I tried to connect to the machine using ssh checking that, indeed, I could access. Privilege escalation Normally after logging in, the first thing I do is download Linpeas into the remote machine using wget and python http server. (If you didn\u0026rsquo;t know, Linpeas is a tool for privilege escalation I will leave a link in the reference).\nThe privilege escalation took me some time so I\u0026rsquo;ll get straight to the point. After running linpeas in the capabilities section you will be shown the following: Another way to get the capabilities will be: Linux capabilities are linux features that allow better security management.I will leave a link to a very good article explaining this topic. As we can see in the image above, python has cap_setuid which allows the user to change the UID(user identifier). So I can do something like this to become root: Thanks for reading Thanks for reading the post and don\u0026rsquo;t forget to share it ðŸ˜„.\nReferences TTL https://subinsb.com/default-device-ttl-values/\nLinpeas https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS\nCapabilities https://www.hackingarticles.in/linux-privilege-escalation-using-capabilities/\n","permalink":"https://rsgbengi.github.io/learning_paths/ctf/htb/cap/","summary":"Recon Ping First of all what I\u0026rsquo;m going to do is use ping to know if the machine is up. In this case, I don\u0026rsquo;t need to know the operating system of the machine because HTB already gives us that information. Nevertheless, A cool tip about ping is that it allows you to know more or less the operating system used by the machine base on the ttl (I will leave a link to a page to know more about this in the reference).","title":"Cap"},{"content":" Getting started This post will contain many interesting tips and tricks that I have learned these last months and I use constantly. So let\u0026rsquo;s get started ðŸ˜„.\nOne-Liners If you are familiar with python, you will know that the language has many powerful One-Liners expressions. For that reason, I will show you some of them.\nList Comprehensions The first one is probably my favorite, because it allows you to manipulate lists in a really cool way.\nFor example, instead of doing it that way, which is how almost everyone does it:\nlis = [] for i in range(10): list.append(i) You can do something more elegant like this one:\nlis = [i for i in range(10)] Moreover, you can use the if/else statement to, for example, create a list with only even numbers:\nlis = [i for i in range(10) if i % 2 == 0] Use of join with list comprehension Related to list comprehensions, you can use the function join to join all elements on a list into a string. Continuing the previous example:\nnumbers_to_str = \u0026#34;,\u0026#34;.join([str(i) for i in list if i % 2 == 0]) #Result: 0,2,4,6,8 Swapping of two numbers If, for example, we are implementing the bubble sorting algorithm we usually do this:\ndef bubbleSort(lis): n = len(lis) aux = 0 for i in range(n-1): for j in range(0, n-i-1): if lis[j] \u0026gt; lis[j + 1] : aux = lis[j] lis[j] = lis[j+1] lis[j+1] = aux Nevertheless, with python, we can use the next one liner to swap the elements without the need to use the variable aux.\ndef bubbleSort(lis): n = len(lis) for i in range(n-1): for j in range(0, n-i-1): if lis[j] \u0026gt; lis[j + 1] : lis[j], lis[j + 1] = lis[j + 1], lis[j] Reversing a list With this technique you can create a reverse list in an exquisite way:\nlis = [1, 2, 3] reversed_list = lis[::-1] print(reversed_list) # Result: 3 2 1  Assign multiple variables in One Line You can assign multiple values to multiple variables by separating variables and values with commas:\nx, y, z = 3, 4, 5 print(x, y , z) #Result 3 4 5  If conditions The final One-Liner that I want to share is a way to make conditions more readable. Normally programmers tend to do this:\nif x == 2 and x == 3 and x == 5: print(\u0026#34;Hello world!\u0026#34;) But if we use the operator in we can code it as:\nif x in [2,3,5]: print(\u0026#34;Hello world!\u0026#34;) Enumerate When you want to go through a list and use both the index and the value contained in said memory position, this tip comes in handy.\n Enumerate is a built-in function of Python and allows us to loop over an iterable and have an automatic counter. It essentially pairs every element in our list with the corresponding index. Most of the newcomers and even some advanced programmers are unaware of it.\n lis = [2,4,1,5] for i,value in enumerate(lis): print(i,value) \u0026#34;\u0026#34;\u0026#34; Result 0 2 1 4 2 1 3 5 \u0026#34;\u0026#34;\u0026#34; Anti-Patterns  Anti-patterns are certain patterns in software development that are considered bad programming practices. Hopefully, with these examples, you will write better code for your development career.\n Check if an element is inside a list Consider using set or bisect for check if an element is in a large list:\n# bad practice list_of_letters = [\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;B\u0026#34;] check = \u0026#34;A\u0026#34; in list_of_letters # good practice set_of_letters = {\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;} check = \u0026#34;A\u0026#34; in set_of_letters Not using get to return default values from a dictionary When you use get, python checks if the key exists. The second argument would be returned if this key doesn\u0026rsquo;t exist.\n# bad practice fruit_price = { \u0026#34;Apple\u0026#34; : 1 \u0026#34;Orange\u0026#34;: 2 \u0026#34;Pear\u0026#34; : 3 } get_price_of = \u0026#34;Apple\u0026#34; if get_price_of in fruit_price: price = fruit_price[get_price_of] else: price = None # good practice price = fruit_price.get(get_price_of,None) Try/except blocks that don\u0026rsquo;t handle exceptions meaningfully Ignoring the exception should never be done.\nnumbers = [0,1,2,3] result = 0 for number in numbers: try: result += 1/num except: pass #good practice result = 0 for number in numbers: try: result += 1/num except ZeroDivisionError: print(\u0026#34;Don\u0026#39;t divide by zero!\u0026#34; ) # alternative you can use suppress  from contextlib import suppress with suppress(Exception): for number in numbers: result += 1/num Thanks for reading If you think that the article has been useful to you, please share it and see you soon ðŸ˜„ ðŸ’¥.\nReferences https://www.geeksforgeeks.org/powerful-one-liner-python-codes/ https://towardsdatascience.com/12-python-tips-and-tricks-for-writing-better-code-b57e7eea580b https://towardsdatascience.com/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704\n ","permalink":"https://rsgbengi.github.io/learning_paths/python/firstpost/","summary":"Getting started This post will contain many interesting tips and tricks that I have learned these last months and I use constantly. So let\u0026rsquo;s get started ðŸ˜„.\nOne-Liners If you are familiar with python, you will know that the language has many powerful One-Liners expressions. For that reason, I will show you some of them.\nList Comprehensions The first one is probably my favorite, because it allows you to manipulate lists in a really cool way.","title":"Python tips and tricks"},{"content":" Getting started This post will contain many interesting tips and tricks that I have learned these last months and I use constantly. So let\u0026rsquo;s get started ðŸ˜„.\nOne-Liners If you are familiar with python, you will know that the language has many powerful One-Liners expressions. For that reason, I will show you some of them.\nList Comprehensions The first one is probably my favorite, because it allows you to manipulate lists in a really cool way.\nFor example, instead of doing it that way, which is how almost everyone does it:\nlis = [] for i in range(10): list.append(i) You can do something more elegant like this one:\nlis = [i for i in range(10)] Moreover, you can use the if/else statement to, for example, create a list with only even numbers:\nlis = [i for i in range(10) if i % 2 == 0] Use of join with list comprehension Related to list comprehensions, you can use the function join to join all elements on a list into a string. Continuing the previous example:\nnumbers_to_str = \u0026#34;,\u0026#34;.join([str(i) for i in list if i % 2 == 0]) #Result: 0,2,4,6,8 Swapping of two numbers If, for example, we are implementing the bubble sorting algorithm we usually do this:\ndef bubbleSort(lis): n = len(lis) aux = 0 for i in range(n-1): for j in range(0, n-i-1): if lis[j] \u0026gt; lis[j + 1] : aux = lis[j] lis[j] = lis[j+1] lis[j+1] = aux Nevertheless, with python, we can use the next one liner to swap the elements without the need to use the variable aux.\ndef bubbleSort(lis): n = len(lis) for i in range(n-1): for j in range(0, n-i-1): if lis[j] \u0026gt; lis[j + 1] : lis[j], lis[j + 1] = lis[j + 1], lis[j] Reversing a list With this technique you can create a reverse list in an exquisite way:\nlis = [1, 2, 3] reversed_list = lis[::-1] print(reversed_list) # Result: 3 2 1  Assign multiple variables in One Line You can assign multiple values to multiple variables by separating variables and values with commas:\nx, y, z = 3, 4, 5 print(x, y , z) #Result 3 4 5  If conditions The final One-Liner that I want to share is a way to make conditions more readable. Normally programmers tend to do this:\nif x == 2 and x == 3 and x == 5: print(\u0026#34;Hello world!\u0026#34;) But if we use the operator in we can code it as:\nif x in [2,3,5]: print(\u0026#34;Hello world!\u0026#34;) Enumerate When you want to go through a list and use both the index and the value contained in said memory position, this tip comes in handy.\n Enumerate is a built-in function of Python and allows us to loop over an iterable and have an automatic counter. It essentially pairs every element in our list with the corresponding index. Most of the newcomers and even some advanced programmers are unaware of it.\n lis = [2,4,1,5] for i,value in enumerate(lis): print(i,value) \u0026#34;\u0026#34;\u0026#34; Result 0 2 1 4 2 1 3 5 \u0026#34;\u0026#34;\u0026#34; Anti-Patterns  Anti-patterns are certain patterns in software development that are considered bad programming practices. Hopefully, with these examples, you will write better code for your development career.\n Check if an element is inside a list Consider using set or bisect for check if an element is in a large list:\n# bad practice list_of_letters = [\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;B\u0026#34;] check = \u0026#34;A\u0026#34; in list_of_letters # good practice set_of_letters = {\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;} check = \u0026#34;A\u0026#34; in set_of_letters Not using get to return default values from a dictionary When you use get, python checks if the key exists. The second argument would be returned if this key doesn\u0026rsquo;t exist.\n# bad practice fruit_price = { \u0026#34;Apple\u0026#34; : 1 \u0026#34;Orange\u0026#34;: 2 \u0026#34;Pear\u0026#34; : 3 } get_price_of = \u0026#34;Apple\u0026#34; if get_price_of in fruit_price: price = fruit_price[get_price_of] else: price = None # good practice price = fruit_price.get(get_price_of,None) Try/except blocks that don\u0026rsquo;t handle exceptions meaningfully Ignoring the exception should never be done.\nnumbers = [0,1,2,3] result = 0 for number in numbers: try: result += 1/num except: pass #good practice result = 0 for number in numbers: try: result += 1/num except ZeroDivisionError: print(\u0026#34;Don\u0026#39;t divide by zero!\u0026#34; ) # alternative you can use suppress  from contextlib import suppress with suppress(Exception): for number in numbers: result += 1/num Thanks for reading If you think that the article has been useful to you, please share it and see you soon ðŸ˜„ ðŸ’¥.\nReferences https://www.geeksforgeeks.org/powerful-one-liner-python-codes/ https://towardsdatascience.com/12-python-tips-and-tricks-for-writing-better-code-b57e7eea580b https://towardsdatascience.com/quick-python-tip-suppress-known-exception-without-try-except-a93ec34d3704\n ","permalink":"https://rsgbengi.github.io/posts/firstpost/","summary":"Getting started This post will contain many interesting tips and tricks that I have learned these last months and I use constantly. So let\u0026rsquo;s get started ðŸ˜„.\nOne-Liners If you are familiar with python, you will know that the language has many powerful One-Liners expressions. For that reason, I will show you some of them.\nList Comprehensions The first one is probably my favorite, because it allows you to manipulate lists in a really cool way.","title":"Python tips and tricks"}]